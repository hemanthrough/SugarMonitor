package com.insulinMeter.Utils;

import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Objects;


import com.insulinMeter.DB.SQliteDB;
import com.insulinMeter.DB.SQliteDB.QueryTyp;
import com.insulinMeter.DB.SQliteDB.TableNames;
import com.insulinMeter.Patient.InsulinDataModel;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class PdfCreator {
	private Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	private Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	public void generatePdfReport(String filePath, String whereClause) {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(filePath + "report.pdf"));
			document.open();
			addMetaData(document);
			addTitlePage(document);
			addContent(document, whereClause);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void addMetaData(Document document) {
		document.addTitle("My first PDF");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("SCS Group");
		document.addCreator("SCS group");
	}

	private void addTitlePage(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Reprt of the patient", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: Insulin Pump on " + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$
																								// //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph(
				"This document describes consumption or insulin dosage of patient during the time frame ", smallBold));

		addEmptyLine(preface, 8);

		preface.add(new Paragraph("This document is a for reference of the physicians only", redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private void addContent(Document document, String whereClause) throws DocumentException {
		Anchor anchor = new Anchor("Insulin data", catFont);
		anchor.setName("First Chapter");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		Paragraph subPara = new Paragraph("Insulin and glucogon injected ", subFont);
		Section subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Hello"));
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 5);
		subCatPart.add(paragraph);

		// add a table
		createTable(subCatPart, whereClause);

		// now add all this to the document
		document.add(catPart);

	}

	private void createTable(Section subCatPart, String whereClause) throws BadElementException {
		PdfPTable table = new PdfPTable(5);

		HashMap<String, String> hashdelte = new HashMap<>();
		hashdelte.put("SYSDATE", ((Long) System.currentTimeMillis()).toString());
		hashdelte.put("GLUCAGONLEVEL", "");
		hashdelte.put("InsulinInjected", "");
		hashdelte.put("GLucoseINjected", "0");
		ArrayList<InsulinDataModel> data = SQliteDB.getInstance().exceuteQuery(hashdelte, QueryTyp.query,
				TableNames.InsulinData, whereClause);
		PdfPCell c1 = new PdfPCell(new Phrase("Date"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Time"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Blood Sugar Level"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Insulin Injected"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Glucogon Injected"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);
		String previousDate = "not set";
		for (InsulinDataModel insulinDataModel : data) {
			Date date = new Date(insulinDataModel.getTimestamp());
			SimpleDateFormat sdf = new SimpleDateFormat("MMMM d,yyyy", Locale.ENGLISH);
			// sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
			String formattedDate = sdf.format(date);
			if (!formattedDate.equals(previousDate)) {
				// table.addCell(Objects.toString(date.getDay()) +":"
				// +Objects.toString(date.getMonth()) +":"
				// +Objects.toString(date.getYear()) );
				previousDate = sdf.format(date);
				table.addCell(previousDate);
			} else {
				table.addCell("");
			}
			sdf = new SimpleDateFormat("h:mm:ss", Locale.ENGLISH);
			table.addCell(sdf.format(date));
			table.addCell(Objects.toString(insulinDataModel.getSugarLevel()));
			table.addCell(Objects.toString(insulinDataModel.getInsulinInjected()));
			table.addCell(Objects.toString(insulinDataModel.getGLucoseINjected()));

		}

		subCatPart.add(table);

	}

	private void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}
